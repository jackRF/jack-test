<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- <bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean> -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jack.test.repository.mybatis" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:/mybatis/configuration.xml" />
		<property name="mapperLocations">
			<list>
				<value>classpath:/mybatis/mapper/**/*Mapper.xml</value>
			</list>
		</property>
	</bean>
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="hibernateProperties" >
            <props>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql} </prop>  
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                
                <!-- 
                                                    它包含4个属性: 
                * create : 会根据你的model类来生成表,但是每次运行都会删除上一次的表,重新生成表,哪怕2次没有任何改变 
                * create-drop : 根据model类生成表,但是sessionFactory一关闭,表就自动删除 
                * update : 最常用的属性，也根据model类生成表,即使表结构改变了,表中的行仍然存在,不会删除以前的行 
                * validate : 只会和数据库中的表进行比较,不会创建新表,但是会插入新值 
                 -->
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>
         <property name="packagesToScan">
            <list>
                <value>com.jack.test.domain</value>
            </list>
        </property>
    </bean> 
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<property name="initialSize" value="${pool.initialSize}" />
		<property name="minIdle" value="${pool.minIdle}" />
		<property name="maxIdle" value="${pool.maxIdle}" />
		<property name="maxActive" value="${pool.maxActive}" />
		<property name="maxWait" value="${pool.maxWait}" />
		<property name="validationQuery" value="${pool.validationQuery}" />
		<property name="testWhileIdle" value="${pool.testWhileIdle}" />
		<property name="testOnBorrow" value="${pool.testOnBorrow}" />
		<property name="testOnReturn" value="${pool.testOnReturn}" />
		<property name="timeBetweenEvictionRunsMillis" value="${pool.timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${pool.minEvictableIdleTimeMillis}" />
		<property name="validationQueryTimeout" value="${pool.validationQueryTimeout}" />
		<property name="numTestsPerEvictionRun" value="${pool.numTestsPerEvictionRun}" />
		<property name="poolPreparedStatements" value="${pool.poolPreparedStatements}" />
		<property name="connectionProperties" value="${pool.connectionProperties}" />

		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
		<property name="filters" value="${druid.filters}" />
	</bean>
	<bean id="dataSource2" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<property name="initialSize" value="${pool.initialSize}" />
		<property name="minIdle" value="${pool.minIdle}" />
		<property name="maxIdle" value="${pool.maxIdle}" />
		<property name="maxActive" value="${pool.maxActive}" />
		<property name="maxWait" value="${pool.maxWait}" />
		<property name="validationQuery" value="${pool.validationQuery}" />
		<property name="testWhileIdle" value="${pool.testWhileIdle}" />
		<property name="testOnBorrow" value="${pool.testOnBorrow}" />
		<property name="testOnReturn" value="${pool.testOnReturn}" />
		<property name="timeBetweenEvictionRunsMillis" value="${pool.timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${pool.minEvictableIdleTimeMillis}" />
		<property name="validationQueryTimeout" value="${pool.validationQueryTimeout}" />
		<property name="numTestsPerEvictionRun" value="${pool.numTestsPerEvictionRun}" />
		<property name="poolPreparedStatements" value="${pool.poolPreparedStatements}" />
		<property name="connectionProperties" value="${pool.connectionProperties}" />
	</bean>
</beans>